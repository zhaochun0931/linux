iptables is the classic and powerful way to set up a firewall in Linux.

It allows you to define detailed rules that control what network traffic is allowed or blocked â€” based on IP, port, protocol, interface, connection state, etc.





ðŸ”¹ 1. What iptables Is

iptables is a user-space utility that interacts with the Linux kernelâ€™s Netfilter framework.
It controls packet filtering and NAT (Network Address Translation).

Each rule you add goes into a table, which has chains that represent points in packet processing.






ðŸ”¹ 2. The Basic Concepts
Tables

| Table      | Purpose                                                   |
| ---------- | --------------------------------------------------------- |
| `filter`   | Default table â€” handles packet filtering (allow/deny)     |
| `nat`      | Network Address Translation (port forwarding, masquerade) |
| `mangle`   | Packet modification (TTL, QoS, etc.)                      |
| `raw`      | Exempt packets from connection tracking                   |
| `security` | SELinux-related rules                                     |






Chains

| Chain         | Trigger point                                       |
| ------------- | --------------------------------------------------- |
| `INPUT`       | Incoming packets to the local machine               |
| `OUTPUT`      | Outgoing packets from the local machine             |
| `FORWARD`     | Packets routed through the host (not for local use) |
| `PREROUTING`  | Before routing decision (useful in NAT)             |
| `POSTROUTING` | After routing decision (useful in NAT)              |






iptables -> firewalld -> nftables




INPUT


OUTPUT


FORWARD


NAT




firewalld: Use the firewalld utility for simple firewall use cases.

nftables: Use the nftables utility to set up complex and performance-critical firewalls, such as for a whole network.

iptables: The iptables utility on Red Hat Enterprise Linux uses the nf_tables kernel API instead of the legacy back end. The nf_tables API provides backward compatibility so that scripts that use iptables commands still work on Red Hat Enterprise Linux.











iptables -L



--proto	-p proto
--match	-m match
--jump	-j target


iptables -A INPUT -p tcp --dport <PORT_NUMBER> -j DROP

iptables -A INPUT -s <IP_ADDRESS> -j DROP



iptables -A INPUT -p tcp ! --dport 22 -j DROP


iptables -A INPUT -p tcp -m tcp --dport 5671 -j ACCEPT

iptables -A INPUT -p tcp ! --dport 22 -j DROP



iptables -A OUTPUT -p tcp --dport 8899 -j REJECT







iptables -A INPUT -p tcp -m tcp --dport 5671 -j DROP
# nc -vz localhost 5671
no response after running this command






iptables -A INPUT -p tcp -m tcp --dport 5671 -j REJECT
reject-with icmp-port-unreachable

# nc -vz localhost 5671
nc: connect to localhost (127.0.0.1) port 5671 (tcp) failed: Connection refused
#



iptables --flush






netfilter

The Linux kernel implements firewalling via the netfilter framework.

Netfilter allows kernel modules to inspect every incoming, outgoing,
or forwarded packet and act upon such a packet by either allowing it or blocking it.

