iptables -> firewalld -> nftables



firewalld: Use the firewalld utility for simple firewall use cases. The utility is easy to use and covers the typical use cases for these scenarios.

nftables: Use the nftables utility to set up complex and performance-critical firewalls, such as for a whole network.

iptables: The iptables utility on Red Hat Enterprise Linux uses the nf_tables kernel API instead of the legacy back end. The nf_tables API provides backward compatibility so that scripts that use iptables commands still work on Red Hat Enterprise Linux.











iptables -L



--proto	-p proto
--match	-m match
--jump	-j target





iptables -A INPUT -p tcp -m tcp --dport 5671 -j ACCEPT








iptables -A INPUT -p tcp -m tcp --dport 5671 -j DROP
# nc -vz localhost 5671
no response after running this command






iptables -A INPUT -p tcp -m tcp --dport 5671 -j REJECT
reject-with icmp-port-unreachable

# nc -vz localhost 5671
nc: connect to localhost (127.0.0.1) port 5671 (tcp) failed: Connection refused
#



iptables --flush




























netfilter

The Linux kernel implements firewalling via the netfilter framework.

Netfilter allows kernel modules to inspect every incoming, outgoing,
or forwarded packet and act upon such a packet by either allowing it or blocking it.






















firewalld is a firewall service daemon that provides a dynamic customizable host-based firewall with a D-Bus interface.


firewalld uses the concepts of zones and services, that simplify the traffic management. 

firewalld blocks all traffic on ports that are not explicitly set as open.


The firewalld service is incompatible with the iptables service




Ports are logical devices that enable an operating system to receive and distinguish network traffic and
forward it accordingly to system services. These are usually represented by a daemon that listens on the
port, that is it waits for any traffic coming to this port.





/etc/sysconfig/network-scripts



ACCEPT: Accepts all incoming packets except those disallowed by specific rules.
REJECT: Rejects all incoming packets except those allowed by specific rules. When firewalld rejects packets, the source machine is informed about the rejection.
DROP: Drops all incoming packets except those allowed by specific rules. When firewalld drops packets, the source machine is not informed about the packet drop.








zone:
The predefined zones are stored in the /usr/lib/firewalld/zones/ directory and can be instantly applied to any available network interface. These files are copied to the /etc/firewalld/zones/ directory only after they are modified. 


On installation, the default zone in firewalld is set to be the public zone. The default zone can be changed.





service:
Alternatively, you can edit the XML files in the /etc/firewalld/services/ directory. If a service is not added or changed by the user, then no corresponding XML file is found in /etc/firewalld/services/. 
The files in the /usr/lib/firewalld/services/ directory can be used as templates if you want to add or change a
service.









NAT(network address translation) type:
Masquerading
Source NAT (SNAT)
Destination NAT (DNAT)
Redirect



1. Masquerading and source NAT (SNAT)
Use one of these NAT types to change the source IP address of packets.


For example, Internet Service Providers do not route private IP ranges, such as 10.0.0.0/8. If you use private IP ranges in
your network and users should be able to reach servers on the Internet, map the source IP address of
packets from these ranges to a public IP address.


Masquerading and SNAT are very similar to one another. The differences are:
Masquerading automatically uses the IP address of the outgoing interface. Therefore, use masquerading if the outgoing interface uses a dynamic IP address.
SNAT sets the source IP address of packets to a specified IP and does not dynamically look up the IP of the outgoing interface. Therefore, SNAT is faster than masquerading. Use SNAT if the outgoing interface uses a fixed IP address.


















# how to check and configure the firewalld 



systemctl status firewalld.service
systemctl stop firewalld.service
firewall-cmd --state





firewall-cmd --get-zones
firewall-cmd --list-all-zones
firewall-cmd --get-default-zone
firewall-cmd --get-active-zones






firewall-cmd --list-all
firewall-cmd --list-services
firewall-cmd --get-services




# add ports
firewall-cmd --list-ports
firewall-cmd --zone=public --add-port=5432/tcp --permanent
firewall-cmd --zone=public --remove-port=5432/tcp --permanent
firewall-cmd --check-config

firewall-cmd --runtime-to-permanent



firewall-cmd --query-port=5432/tcp

firewall-cmd --reload







# very dangerous
# Enabling panic mode stops all networking traffic. For this reason, it should be used only when you have the physical access to the machine or if you are logged in using a serial console.

firewall-cmd --panic-on
firewall-cmd --panic-off
firewall-cmd --query-panic


































nftables


The nftables framework classifies packets and it is the successor to the iptables, ip6tables, arptables, ebtables, and ipset utilities.

nft --version



# add table
nft add table ip table-name
nft delete table table-name


# add chain
nft add chain ip table-name chain-name '{ type filter hook input priority 0; }'
nft delete chain table-name chain-name


'ip' specifies that the table is for IPv4.
'type filter' specifies that this chain will filter packets.
'hook input' specifies that this chain will process incoming packets.
'priority 0' defines the priority of the hook.









# add rule
nft add rule ip table-name chain-name tcp dport 22 accept
nft delete rule ip table-name chain-name handle 1


# list rule
nft -a list ruleset


# save 
nft list ruleset > /etc/sysconfig/nftables.conf





















# selinux


Security Enhanced Linux (SELinux) is an additional layer of system security that determines which process can access which files, directories, and ports.



SELinux has two possible states
Enabled
Disabled



When SELinux is enabled, it can run in one of the following modes:
Enforcing
Permissive

When SELinux is disabled, only Discretionary Access Control (DAC) rules are used.












# Temporarily Set SELinux to Permissive Mode
setenforce 0


setenforce 1
sestatus
getenforce

ls -Z





cat /etc/selinux/config
SELINUX=disabled



reboot to take effective









