iptables -> firewalld -> nftables



firewalld: Use the firewalld utility for simple firewall use cases.

nftables: Use the nftables utility to set up complex and performance-critical firewalls, such as for a whole network.

iptables: The iptables utility on Red Hat Enterprise Linux uses the nf_tables kernel API instead of the legacy back end. The nf_tables API provides backward compatibility so that scripts that use iptables commands still work on Red Hat Enterprise Linux.











iptables -L



--proto	-p proto
--match	-m match
--jump	-j target





iptables -A INPUT -p tcp -m tcp --dport 5671 -j ACCEPT








iptables -A INPUT -p tcp -m tcp --dport 5671 -j DROP
# nc -vz localhost 5671
no response after running this command






iptables -A INPUT -p tcp -m tcp --dport 5671 -j REJECT
reject-with icmp-port-unreachable

# nc -vz localhost 5671
nc: connect to localhost (127.0.0.1) port 5671 (tcp) failed: Connection refused
#



iptables --flush




























netfilter

The Linux kernel implements firewalling via the netfilter framework.

Netfilter allows kernel modules to inspect every incoming, outgoing,
or forwarded packet and act upon such a packet by either allowing it or blocking it.






















































nftables


The nftables framework classifies packets and it is the successor to the iptables, ip6tables, arptables, ebtables, and ipset utilities.

nft --version



# add table
nft add table ip table-name
nft delete table table-name


# add chain
nft add chain ip table-name chain-name '{ type filter hook input priority 0; }'
nft delete chain table-name chain-name


'ip' specifies that the table is for IPv4.
'type filter' specifies that this chain will filter packets.
'hook input' specifies that this chain will process incoming packets.
'priority 0' defines the priority of the hook.









# add rule
nft add rule ip table-name chain-name tcp dport 22 accept
nft delete rule ip table-name chain-name handle 1


# list rule
nft -a list ruleset


# save 
nft list ruleset > /etc/sysconfig/nftables.conf





















# selinux


Security Enhanced Linux (SELinux) is an additional layer of system security that determines which process can access which files, directories, and ports.



SELinux has two possible states
Enabled
Disabled



When SELinux is enabled, it can run in one of the following modes:
Enforcing
Permissive

When SELinux is disabled, only Discretionary Access Control (DAC) rules are used.












# Temporarily Set SELinux to Permissive Mode
setenforce 0


setenforce 1
sestatus
getenforce

ls -Z





cat /etc/selinux/config
SELINUX=disabled



reboot to take effective









