🧠 1. The Core Concepts

Linux memory management is virtual memory–based, meaning every process thinks it has a large, contiguous address space.
Underneath, the kernel maps these virtual pages to physical RAM (and swap).






1️⃣ Memory Page Basics

Page: smallest unit of memory management in Linux.

Typical page size:

  4 KB (most common)
  
  2 MB or 1 GB (huge pages / huge TLB)

All memory allocations are page-aligned internally.





In Linux, a page is the smallest unit of memory management used by both hardware and the kernel.

💡 Think of memory (RAM) as a book, and each page as one sheet of that book.

Linux doesn’t manage individual bytes or words of memory — it manages pages.



🧮 2️⃣ Typical size of a page

Most systems: 4 KB (4096 bytes)

Large / huge pages: 2 MB or 1 GB (for performance, fewer TLB lookups)







Check page size in Linux:

getconf PAGE_SIZE



# getconf PAGE_SIZE
4096
#







cat /proc/meminfo | grep -i page

















🧩 1️⃣ Fundamental Concepts
🔹 Virtual Memory (VM)

Every process in Linux sees its own virtual address space, e.g. 4 GB on 32-bit or 128 TB on 64-bit systems.
This abstraction:

Simplifies programming (each process starts at address 0x0)

Provides isolation (processes can’t access each other’s memory)

Allows paging and swapping



🔹 Pages

The smallest unit of memory management.

Most x86_64 systems use 4 KB pages, though large pages (2 MB, 1 GB) exist.

Every virtual memory area (VMA) is mapped by page tables that connect:

Virtual Address → Physical Frame
