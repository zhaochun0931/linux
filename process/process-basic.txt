A Linux process is much more than just “a running program”. It has memory, file descriptors, threads, scheduling info, signals, namespaces, and more.




🔹 1. What is a Process?

An instance of a program in execution.

Identified by PID (Process ID).

Each process has:

    Code (text segment)
    
    Data (heap, stack, globals)
    
    Open files
    
    Execution context (registers, program counter)
    
    Kernel structures (task_struct in kernel space)




🔹 2. Process IDs

PID → unique ID for each process.

PPID → parent process ID.

TGID → thread group ID (main thread’s PID).

Check:

ps -o pid,ppid,comm

ps -o pid,ppid,state,comm


ps -o pid,ppid,state,comm,cmd




🔹 4. Process Information in /proc

Linux exposes process details via /proc/[pid]/. Example for process 1234:

    /proc/1234/status → human-readable info (UID, memory, threads).
    
    /proc/1234/stat → raw metrics (CPU time, priority, state, etc.).
    
    /proc/1234/maps → memory layout.
    
    /proc/1234/fd/ → open file descriptors.
    
    /proc/1234/cmdline → command used to start process.
    
    /proc/1234/environ → environment variables.







🔹 8. Threads vs Processes

Linux treats threads as lightweight processes (each has a PID, shares memory with TGID).

Check with:

ps -T -p <pid>


All threads share:

    Code
    
    Data/Heap
    
    File descriptors

Each thread has:

    Own registers
    
    Own stack



🔹 9. File Descriptors

Every process has a file descriptor table:

0 → stdin

1 → stdout

2 → stderr

other files, sockets, pipes.

Check:

ls -l /proc/$$/fd



















🔹 Diagram of fork()

Suppose your program calls:

pid_t pid = fork();

1️⃣ Before fork()
Parent Process (PID 47226)
+---------------------------+
| Code Segment (program)    |
| Data Segment              |
| Heap                      |
| Stack                     |
+---------------------------+


Only one process exists.

PID = 47226

2️⃣ After fork()
Parent Process (PID 47226)                  Child Process (PID 47227)
+---------------------------+               +---------------------------+
| Code Segment (shared)     |               | Code Segment (shared)     |
| Data Segment (copy)       |               | Data Segment (copy)       |
| Heap (copy)               |               | Heap (copy)               |
| Stack (copy)              |               | Stack (copy)              |
+---------------------------+               +---------------------------+


Child PID is different (47227)

Parent PID of child = 47226

Code segment is shared (read-only) via copy-on-write

Data, heap, stack are copied (initially via copy-on-write)

3️⃣ After fork(), execution
if (pid == 0) {
    // Child
} else {
    // Parent
}


Both processes start executing at the next instruction after fork().

Parent sees pid > 0, child sees pid == 0.

They can run independently.

4️⃣ Relationship in ps -ef
UID       PID    PPID  CMD
root    47226   43832  ./a.out   <- Parent process
root    47227   47226  ./a.out   <- Child process


PPID shows the parent process ID.

Two separate processes exist simultaneously.

💡 Key point:

fork() creates a new process identical to the parent at the moment of creation.

Each process has its own memory space, so changes in one don’t affect the other.


