A Linux process is much more than just “a running program”. It has memory, file descriptors, threads, scheduling info, signals, namespaces, and more.




🔹 1. What is a Process?

An instance of a program in execution.

Identified by PID (Process ID).

Each process has:

    Code (text segment)
    
    Data (heap, stack, globals)
    
    Open files
    
    Execution context (registers, program counter)
    
    Kernel structures (task_struct in kernel space)




🔹 2. Process IDs

PID → unique ID for each process.

PPID → parent process ID.

TGID → thread group ID (main thread’s PID).

Check:

ps -o pid,ppid,comm

ps -o pid,ppid,state,comm


ps -o pid,ppid,state,comm,cmd




🔹 4. Process Information in /proc

Linux exposes process details via /proc/[pid]/. Example for process 1234:

    /proc/1234/status → human-readable info (UID, memory, threads).
    
    /proc/1234/stat → raw metrics (CPU time, priority, state, etc.).
    
    /proc/1234/maps → memory layout.
    
    /proc/1234/fd/ → open file descriptors.
    
    /proc/1234/cmdline → command used to start process.
    
    /proc/1234/environ → environment variables.







🔹 8. Threads vs Processes

Linux treats threads as lightweight processes (each has a PID, shares memory with TGID).

Check with:

ps -T -p <pid>


All threads share:

    Code
    
    Data/Heap
    
    File descriptors

Each thread has:

    Own registers
    
    Own stack



🔹 9. File Descriptors

Every process has a file descriptor table:

0 → stdin

1 → stdout

2 → stderr

other files, sockets, pipes.

Check:

ls -l /proc/$$/fd





