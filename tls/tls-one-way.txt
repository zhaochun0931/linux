In one-way SSL authentication (Server Certificate Authentication), only the client validates the server; the server does not verify the client application. When implementing one-way SSL authentication, the server application shares its public certificate with the client






Let’s understand the TLS 1.3 handshake process a bit more in depth by breaking it down:

First, the client (browser) sends supported cipher suites and compatible SSL/TLS version to initiate the connection. This is called the “client hello” message.

In return, the web server checks the cipher suites and SSL/TLS version. Then, it shares its public certificate to the client along with the “server hello” message.

Upon receiving the certificate file, the client validates it. The browser then initiates the process of private key verification by generating and encrypting a “pre-master secret” using the public key of the SSL/TLS certificate.

In turn, the web server decrypts the pre-master secret with its private key and establishes a secure connection.

So that’s how the verification of the web server is done. This is called “one-way SSL/TLS.” 



















In two-way SSL authentication, the client application verifies the identity of the server application, and then the server application verifies the identity of the client application. Both parties share their public certificates, and then validation is performed. Two-way SSL authentication works with a mutual handshake by exchanging the certificates. You can also authenticate through a username or Common Name injection.





Here are the steps required for a 2 way SSL handshake process:

First, the client sends supported cipher suites and compatible SSL/TLS version to initiate the connection. This is called the “client hello” message.

In return, the web server checks the cipher suites and SSL/TLS version. Then, it sends its public certificate to the client along with a request for the client’s certificate and its “server hello” message.

Upon receiving the certificate file, the browser validates it. Afterward, the client sends its own SSL certificate to the server.

The server then verifies the client’s SSL/TLS certificate and paves the way for a secure connection with it.

