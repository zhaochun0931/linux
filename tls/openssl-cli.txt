the PEM (Privacy-Enhanced Mail) format uses Base64 encoding to represent binary data in an ASCII string format, making it easier to handle in text-based systems.



Certificate PEM:
typically contains an X.509 certificate.

-----BEGIN CERTIFICATE-----
xxx
-----END CERTIFICATE-----






Private Key PEM:

Contents: Contains a private key, which could be for RSA, DSA, or ECDSA.
Header/Footer: Can start with -----BEGIN PRIVATE KEY----- or more specific headers like -----BEGIN RSA PRIVATE KEY-----.
Purpose: Used to authenticate the owner of the certificate and to decrypt data encrypted with the corresponding public key.



-----BEGIN RSA PRIVATE KEY-----
xxx
-----END RSA PRIVATE KEY-----





Public Key PEM:

Contents: Contains a public key corresponding to a private key.
Header/Footer: Starts with -----BEGIN PUBLIC KEY----- and ends with -----END PUBLIC KEY-----.
Purpose: Shared with others to enable encrypted communications or digital signatures.





Certificate Signing Request (CSR) PEM:

Contents: Contains a CSR that includes the public key and identifying information.
Header/Footer: Begins with -----BEGIN CERTIFICATE REQUEST----- and ends with -----END CERTIFICATE REQUEST-----.






*.pem: This is the most generic suffix and can be used for any type of PEM-encoded data, including certificates, private keys, and public keys.

*.crt or .cert: These are commonly used for PEM-encoded certificates. The .crt suffix often denotes a certificate file, while .cert can also be used for certificates.

*.key: This is typically used for PEM-encoded private keys.

*.csr: This suffix is used for PEM-encoded Certificate Signing Requests (CSRs).

*.pub: This is used for PEM-encoded public keys.









openssl s_client -connect localhost:443 -help

openssl list -cipher-algorithms


openssl s_client -connect localhost:443 -tls1_1

 -tls1                      Just use TLSv1
 -tls1_1                    Just use TLSv1.1
 -tls1_2                    Just use TLSv1.2
 -tls1_3                    Just use TLSv1.3



openssl ciphers
openssl ciphers -s -tls1_3







# generate private key and public key
openssl genpkey -algorithm RSA -out mytls.key -outpubkey mytls.pem -outform PEM

$ file *
mycrt: ASCII text
mykey: ASCII text
$





openssl genpkey -algorithm RSA -out mytls.key -outpubkey mytls.pem -outform DER
$ file *
mycrt: data
mykey: DER Encoded Key Pair, 2048 bits
$



# generate csr
openssl req -new -key mytls.key -out mytls.csr
openssl req -text -in mytls.csr -verify -noout



# generate x509 certificate
openssl x509 -req -in mytls.csr -signkey mytls.key -out mytls.crt
openssl x509 -in mytls.crt -noout -fingerprint





$ file *
mycrt: PEM certificate
mycsr: PEM certificate request
mykey: ASCII text
mypub: ASCII text
$


Up till now, the self-signed certificate is successfully.























# run below command in one terminal to set up an ssl server
openssl s_server -cert server.crt -key server.key -accept 8443

# another terminal to connect the ssl server 
openssl s_client -connect localhost:8443






openssl s_server -cert server.cert.pem -key server.key -CAfile ca.crt
openssl s_client -connect localhost:8443 -CAfile ca.crt -cert client.cert.pem -key client.key






openssl s_client -connect localhost:8443 -cert client-cert.pem -key client-key.pem -CAfile ca-cert.pem -debug -state -msg






# check certificate, certificate files usually have a .pem or .crt extension
openssl x509 -in server.crt -text -noout


# check csr
openssl req -text -noout -verify -in server.csr


# check private key
openssl rsa -check -in server.key


# verify public key, The public key contained in a private key and a certificate must be the same
openssl x509 -in server.crt -noout -pubkey
openssl rsa -in server.key -pubout





# convert the public crt and the private key to pfx(pkcs12) format, you should set the export password for pfx file
openssl pkcs12 -export -in server.crt -inkey server.key -out server.p12 -name aliasname





# check pfx/p12 file
openssl pkcs12 -info -in server.p12

you must Enter PEM pass phrase, such as 'password'




