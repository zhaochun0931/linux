After Chrome 58, self-signed certificate without SAN(Subject Alternative Name) is not valid anymore.


working



# generate ca

export caname=www.ca.com

openssl genrsa -out ca.key

openssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 -out ca.crt -subj "/C=CN/ST=Shanghai/O=ORG/OU=ORG_UNIT/CN=$caname"










# generate server key

export servername=www.xiaoming.com

openssl genrsa -out tls.key

openssl req -new -sha256 -key tls.key \
-subj "/C=CN/ST=Shanghai/O=ORG/OU=ORG_UNIT/CN=$servername" \
-reqexts SAN \
-config <(cat /etc/ssl/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:$servername\n")) \
-out tls.csr









openssl req -new -sha256 -key tls.key \
-subj "/C=CN/ST=Shanghai/O=ORG/OU=ORG_UNIT/CN=$servername" \
-reqexts SAN \
-config <(cat /etc/ssl/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:$servername,IP:1.1.1.1\n")) \
-out tls.csr

# cannot add the space between the "<" and the "(print" in above command







# sign csr with the ca

openssl x509 -req -extfile <(printf "subjectAltName=DNS:$servername") -days 365 \
-in tls.csr \
-CA ca.crt -CAkey ca.key -CAcreateserial \
-out tls.crt -sha256


openssl x509 -req -extfile <(printf "subjectAltName=DNS:$servername,IP:1.1.1.1") -days 365 \
-in tls.csr \
-CA ca.crt -CAkey ca.key -CAcreateserial \
-out tls.crt -sha256





openssl verify -CAfile ca.crt tls.crt
openssl x509 -noout --text -in tls.crt
openssl rsa -pubout -in ca.key
openssl x509 -pubkey -noout -in ca.crt




openssl x509 -noout -modulus -in tls.crt | openssl md5
openssl rsa -noout -modulus -in tls.key | openssl md5








# export to pfx
openssl pkcs12 -export -in rootCA.crt -inkey ca.key -out ca.pfx



# add the pfx to the trusted root certification authorities


# add the entry for the www.xiaoming.com in the /etc/hosts or windows hosts files
1.1.1.1 www.xiaoming.com


# successfully visit https://www.xiaoming.com from the browser












# how to verify the certificate

openssl s_server -cert mydomain.crt -key mydomain.key -accept 8443

openssl s_client -connect localhost:8443 -CAfile ca.crt







# import the certificate to java truststore
keytool -import -alias tls -file tls.crt -storetype JKS -keystore tls-ts.jks -storepass password








# convert public cert and key pair to pfx
openssl pkcs12 -export -in tls.crt -inkey tls.key -out tls.p12

# convert the pfx to java keystore
keytool -importkeystore -srckeystore tls.p12 -srcstoretype pkcs12 -destkeystore tls.jks





# generate a password protected private key
openssl genrsa -des3 -out ca.key


# check that a private key (ca.key) is a valid key:
openssl rsa -check -in ca.key

openssl rsa -noout -modulus -in ca.key | openssl md5
