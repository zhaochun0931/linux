

First, we'll create a private key. A private key helps to enable encryption, and is the most important component of our certificate.
openssl genrsa -out domain.key 2048


If we want our certificate signed, we need a certificate signing request (CSR). Let's create a CSR (domain.csr) from our existing private key:
openssl req -key domain.key -new -out domain.csr

An important field is Common Name, which should be the exact Fully Qualified Domain Name (FQDN) of our domain. A challenge password and An optional company name can be left empty.



We can also create both the private key and CSR with a single command:
openssl req -newkey rsa:2048 -nodes -keyout domain.key -out domain.csr











Creating a Self-Signed Certificate, A self-signed certificate is a certificate that's signed with its own private key. 
It can be used to encrypt data just as well as CA-signed certificates, but our users will be shown a warning that says the certificate isn't trusted.

Let's create a self-signed certificate (domain.crt) with our existing private key and CSR:
openssl x509 -signkey domain.key -in domain.csr -req -days 365 -out domain.crt








We can create a self-signed certificate with just a private key:
openssl req -key domain.key -new -x509 -days 365 -out domain.crt

This command will create a temporary CSR. We still have the CSR information prompt, of course.











We can even create a private key and a self-signed certificate with just a single command:
openssl req -newkey rsa:2048 -keyout domain.key -nodes -x509 -days 365 -out domain.crt
openssl req -newkey rsa:2048 -sha3-256 -keyout domain.key -nodes -x509 -days 365 -out domain.crt




openssl x509 -in server.crt -text -noout





# test the self-signed cert

First use openssl s_server to start a TLS/SSL test server on port 8443:

openssl s_server -accept 8443 -cert domain.crt -key domain.key






Then open another terminal to use openssl s_client to connect to test server on port 8443:

openssl s_client -connect localhost:8443





