1️⃣ Create your CA
# Generate CA private key
openssl genrsa -out ca.key 4096

# Create self-signed CA certificate
openssl req -x509 -new -nodes -key ca.key -sha256 -days 3650 -out ca.crt -subj "/C=US/ST=CA/L=SanFrancisco/O=MyOrg/OU=IT/CN=MyRootCA"


Now you have:
ca.key (CA private key)
ca.crt (CA cert, trusted root)





2️⃣ Generate Server Key + CSR with SAN

First, create an OpenSSL config file (san.cnf):

[ req ]
default_bits       = 2048
prompt             = no
default_md         = sha256
req_extensions     = req_ext
distinguished_name = dn

[ dn ]
C=US
ST=CA
L=SanFrancisco
O=MyOrg
OU=IT
CN=myserver.local

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = myserver.local
DNS.2 = localhost
IP.1  = 127.0.0.1


Now generate key + CSR:
openssl genrsa -out server.key 2048
openssl req -new -key server.key -out server.csr -config san.cnf

3️⃣ Sign Server CSR with CA
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key \
  -CAcreateserial -out server.crt -days 825 -sha256 \
  -extensions req_ext -extfile san.cnf


You now have:
server.key (private key)
server.crt (signed by CA)
ca.crt (trust anchor)

4️⃣ Verify SANs
openssl x509 -in server.crt -text -noout | grep -A1 "Subject Alternative Name"


You should see DNS:myserver.local, DNS:localhost, IP:127.0.0.1.






openssl pkcs12 -export \
  -in server.crt \
  -inkey server.key \
  -out keystore.p12 \
  -name gemfire \
  -CAfile ca.crt \
  -password pass:changeit




keytool -importcert \
  -trustcacerts \
  -alias myca \
  -file ca.crt \
  -keystore truststore.p12 \
  -storetype PKCS12 \
  -storepass changeit \
  -noprompt






✅ Now you have:

keystore.jks → contains server private key + cert

truststore.jks → contains CA cert (to trust clients signed by it)








  

