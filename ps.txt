When a program runs, the system will create a process by placing the program data and code in memory and creating a runtime stack. 

A process is an instance of a program with an associated processor environment (ordinal counter, registers, etc...) and memory environment.






There is a parent/child relationship between processes. A child process results from the parent calling the fork() primitive and duplicating its code to create a child. The PID of the child is returned to the parent process so that it can talk to it. Each child has its parent's identifier, the PPID.







The end-of-process sequencing is as follows:
1. Closing of the open files
2. Release of the used memory
3. Sending a signal to the parent and child processes
When a parent process dies, their children are said to be orphans. They are then adopted by the init process, which will destroy them.





Processes can run in two ways:
synchronous: the user loses access to the shell during command execution. The command prompt reappears at the end of the process execution.
asynchronous: the process is processed in the background. The command prompt is displayed again immediately.




This version of ps accepts several kinds of options:
1. UNIX options, which may be grouped and must be preceded by a dash.
2. BSD options, which may be grouped and must not be used with a dash.
3. GNU long options, which are preceded by two dashes.





ps -ef
ps -aux
ps -f -u username


ps aux




# LWP: Lightweight Process (Thread ID)
ps -L -p PID




kill -9 PID






top





pstree


