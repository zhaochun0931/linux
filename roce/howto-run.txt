apt-get install build-essential cmake gcc libudev-dev libnl-3-dev libnl-route-3-dev ninja-build pkg-config valgrind python3-dev cython3 python3-docutils pandoc




2. Install rxe_cfg tool
git clone https://github.com/linux-rdma/rdma-core.git
cd rdma-core
bash build.sh









Now you have the rxe_cfg script.

3. Create a Soft-RoCE device

Pick your Ethernet NIC (say eth0):

# Add rxe device
sudo rxe_cfg add eth0

# Verify
rxe_cfg status


Output example:

Name  Link  Driver   Speed  NMTU  IPv4_addr   Rxe  RoCE
eth0  up    virtio   10000  1500  10.0.0.1    rxe  roce-v2

4. Start RDMA test

On server node:

ib_write_bw -d rxe_eth0 -F


On client node:

ib_write_bw -d rxe_eth0 -F <server_ip>


You’ll see bandwidth results, e.g.:

  #bytes     #iterations    BW peak[Gb/sec]    BW average[Gb/sec]
  65536      1000           3.2                3.1

5. Try pingpong latency

Server:

ib_send_lat -d rxe_eth0


Client:

ib_send_lat -d rxe_eth0 <server_ip>


You’ll see latency in microseconds, e.g.:

  #bytes     #iterations    t_min[usec]    t_avg[usec]
  2          1000           14.32          15.87


✅ This simulates RoCEv2 over Ethernet, but entirely in software.
