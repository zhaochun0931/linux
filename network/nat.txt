1. What is SNAT?

SNAT stands for Source Network Address Translation.

It’s a technique used in networking to change the source IP address of outgoing packets.

Typically used when devices in a private network need to communicate with external networks (like the Internet) using a single public IP.






2. How SNAT works

Imagine you have a private network:

Private Network: 192.168.1.0/24
Router/Public IP: 203.0.113.10


A device inside (e.g., 192.168.1.100) wants to access the Internet.



Router rewrites the source IP of the outgoing packet:

Original:   192.168.1.100 → 8.8.8.8
After SNAT: 203.0.113.10 → 8.8.8.8


When the response comes back to 203.0.113.10, the router maps it back to 192.168.1.100.





| Feature   | SNAT                               | DNAT                               |
| --------- | ---------------------------------- | ---------------------------------- |
| Changes   | **Source IP**                      | **Destination IP**                 |
| Direction | Outgoing packets                   | Incoming packets                   |
| Use case  | Private → Public (Internet access) | Public → Private (Port forwarding) |












SNAT in Docker – Diagram
+-------------------+
|   Container       |
| IP: 172.18.0.2    |
| Port: 5000        |
+-------------------+
          |
          | Outgoing packet
          v
+-------------------+
|   Docker Host     |
| IP: 192.168.1.10  |
+-------------------+
          |
          | SNAT: Source IP changed
          v
+-------------------+
|     Internet      |
|  Destination IP: 8.8.8.8 |
+-------------------+



Explanation

Container sends packet

          Source IP = container IP (172.18.0.2)
          
          Destination IP = Internet server (8.8.8.8)



Docker host applies SNAT

          Source IP rewritten to host IP (192.168.1.10)
          
          Keeps track of the mapping: container ↔ host



Packet reaches the Internet

          Internet sees the request coming from 192.168.1.10 (host IP)



Response comes back

          Docker looks up the mapping and forwards response to the container 172.18.0.2






apk add --no-cache curl
curl ifconfig.me
curl ifconfig.io




This will print your public IP (the host’s IP).











Where SNAT mappings are stored

          When SNAT is applied (e.g., by Docker), the kernel must remember the mapping.
          
          Otherwise, it couldn’t know which container to send the reply back to.
          
          These mappings live in the connection tracking table (conntrack).



apt install conntrack
conntrack -L





tcp      6 431999 ESTABLISHED src=172.18.0.2 dst=8.8.8.8 sport=35012 dport=53 
         src=8.8.8.8 dst=203.0.113.10 sport=53 dport=35012 [ASSURED] mark=0 use=1



Explanation:

          src=172.18.0.2 sport=35012 → original container connection
          
          After SNAT, reply goes to dst=203.0.113.10 dport=35012 → host public IP/port

This shows the SNAT mapping table entry.














🧩 Lab 3: NAT and Internet Access

🧱 Goal: Let your “private” namespace reach the Internet via your host.

sudo ip netns add client
sudo ip link add vethc type veth peer name vethc-host
sudo ip link set vethc netns client

# Assign IPs
sudo ip -n client addr add 192.168.100.2/24 dev vethc
sudo ip addr add 192.168.100.1/24 dev vethc-host

sudo ip -n client link set vethc up
sudo ip link set vethc-host up
sudo ip -n client link set lo up

# Enable IP forwarding on host
sudo sysctl -w net.ipv4.ip_forward=1

# Set default route for client
sudo ip -n client route add default via 192.168.100.1

# Masquerade (NAT) on the host
sudo iptables -t nat -A POSTROUTING -s 192.168.100.0/24 -j MASQUERADE

# Test external ping
sudo ip netns exec client ping -c 2 8.8.8.8


✅ Result: You’ve just simulated a NAT gateway (like your home router).
The namespace client is now browsing through your host’s real Internet.



















DNAT is Destination Network Address Translation

1. What is DNAT?

DNAT changes the destination IP (and/or port) of incoming packets.

In Docker, it’s used for port mapping: exposing container ports to the host.





docker run -d -p 8080:80 nginx

External traffic to host:8080 → DNAT to container:80


$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                     NAMES
351899b992db   nginx     "/docker-entrypoint.…"   6 seconds ago   Up 6 seconds   0.0.0.0:8080->80/tcp, [::]:8080->80/tcp   goofy_mayer
$

curl http://localhost:8080



